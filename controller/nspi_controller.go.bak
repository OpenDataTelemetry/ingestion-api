package controller

import (
	// "context"
	"encoding/json"
	"fmt"
	"net/http"
	"strings"

	// "strconv"

	// "github.com/OpenDataTelemetry/ingestion-api/mqtt"
	// "ingestion-api/controller"
	// "github.com/OpenDataTelemetry/ingestion-api/mqtt"
	"github.com/gin-gonic/gin"
)

// type Influx struct {
// 	Name      string `json:"name"`
// 	Fields    string `json:"fields"`
// 	Tags      string `json:"tags"`
// 	Timestamp uint64 `json:"timestamp"`
// 	// Topic   string `json:"username"`
// 	// Message string `json:"password"`
// }

// Receive values
func Ping(pings chan<- string, msg string) {
	pings <- msg
	fmt.Printf("\nSend message: %s\n", pings)
}

func HandleAllNSPI(c *gin.Context) {
	pings := make(chan string, 1)

	jsonData := `{"measurement":"masak", "organization":"IMT", "deviceType":"NSPI", "deviceId": "01", "etc": "ethernet"}`

	var data map[string]interface{}

	// if err := c.ShouldBindJSON(&data); err != nil {
	// 	c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
	// 	return
	// }
	err := json.Unmarshal([]byte(jsonData), &data)
	if err != nil {
		fmt.Println("Error:", err)
		return
	}

	// OpenDataTelemetry/IMT/LNS/MEASUREMENT/DEVICE_ID/up/etc
	var measurement = data["measurement"]
	var organization = data["organization"]
	var deviceType = data["deviceType"]
	var deviceId = data["deviceId"]
	var etc = data["etc"]

	var sb strings.Builder
	sb.WriteString(`OpenDataTelemetry/`)
	sb.WriteString(organization.(string))
	sb.WriteString(`/`)
	sb.WriteString(deviceType.(string))
	sb.WriteString(`/`)
	sb.WriteString(measurement.(string))
	sb.WriteString(`/`)
	sb.WriteString(deviceId.(string))
	sb.WriteString(`/up/`)
	sb.WriteString(etc.(string))

	// Process the user data here
	Ping(pings, sb.String())
	c.JSON(http.StatusOK, gin.H{"topic": sb.String()})

	// ch := make(chan [2]string)
	// ch <- [2]string{"topic", "message"}
	// t := "topic"
	// m := "message"
	// mqtt.PubToBroker(sb.String(), jsonData)
	// go mqtt.PubToBroker(t, m)

}
